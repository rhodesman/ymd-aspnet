//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using YPortal.BusinessEntities;
using YPortal.DataAccessLayer;
using YPortal.Helpers;

namespace YPortal.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class BlastBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public BlastBLL() : this(new DatabaseContext()) { }

        public BlastBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnBlastSaving(Blast blast);

        partial void OnBlastCreating(Blast blast);
        partial void OnBlastCreated(Blast blast);

        partial void OnBlastUpdating(Blast blast);
        partial void OnBlastUpdated(Blast blast);

        partial void OnBlastSaved(Blast blast);

        partial void OnBlastDeleting(Blast blast);
        partial void OnBlastDeleted(Blast blast);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Blast GetBlastByBlastId(Int64 blastId)
        {
            //Validate Input
            if (blastId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("blastId");
            return (_DatabaseContext.Blasts.FirstOrDefault(blast => blast.BlastId == blastId));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Blast> GetBlastsByCampaignId(Int64? campaignId)
        {
            //Validate Input
            if (campaignId.IsEmpty())
                return GetAllBlasts();
 
            return (from blast in _DatabaseContext.Blasts
                    where campaignId == null ? blast.CampaignId == null : blast.CampaignId == campaignId
                    select blast).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Blast> GetBlastsByCampaignIdPaged(Int64? campaignId, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (campaignId.IsEmpty())
                return GetAllBlastsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "BlastId";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from blast in
                        _DatabaseContext.Blasts
                        .DynamicOrderBy(orderBy)
                    where campaignId == null ? blast.CampaignId == null : blast.CampaignId == campaignId
                    select blast
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllBlastsByCampaignId(Int64? campaignId, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (campaignId.IsEmpty())
                return GetTotalCountForAllBlasts(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Blasts.Count(blast => campaignId == null ? blast.CampaignId == null : blast.CampaignId == campaignId);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Blast> GetAllBlasts()
        {
            return _DatabaseContext.Blasts.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Blast> GetAllBlastsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "BlastId";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from blast in 
                        _DatabaseContext.Blasts
                        .DynamicOrderBy(orderBy)
                    select blast
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllBlasts(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Blasts.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual Int64 CreateNewBlast(Blast newBlast)
        {
            // Validate Parameters 
            if (newBlast == null)
                throw (new ArgumentNullException("newBlast"));

	        // Apply business rules
            OnBlastSaving(newBlast);
            OnBlastCreating(newBlast);

            _DatabaseContext.Blasts.AddObject(newBlast);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No blast created!");

            // Apply business workflow
            OnBlastCreated(newBlast);
            OnBlastSaved(newBlast);

            return newBlast.BlastId;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateBlast(Blast updatedBlast)
        {
            // Validate Parameters
            if (updatedBlast == null)
                throw (new ArgumentNullException("updatedBlast"));

            // Validate Primary key value
            if (updatedBlast.BlastId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("BlastId");

            // Apply business rules
            OnBlastSaving(updatedBlast);
            OnBlastUpdating(updatedBlast);

            //attaching and making ready for parsistance
            if (updatedBlast.EntityState == EntityState.Detached)
                _DatabaseContext.Blasts.Attach(updatedBlast);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedBlast, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No blast updated!");

            //Apply business workflow
            OnBlastUpdated(updatedBlast);
            OnBlastSaved(updatedBlast);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteBlast(Blast blastToBeDeleted)
        {
            //Validate Input
            if (blastToBeDeleted == null)
                throw (new ArgumentNullException("blastToBeDeleted"));

            // Validate Primary key value
            if (blastToBeDeleted.BlastId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("BlastId");

            OnBlastSaving(blastToBeDeleted);
            OnBlastDeleting(blastToBeDeleted);

            if (blastToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Blasts.Attach(blastToBeDeleted);
			_DatabaseContext.Blasts.DeleteObject(blastToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Blast deleted!");
            
            OnBlastDeleted(blastToBeDeleted);
            OnBlastSaved(blastToBeDeleted);

        }

        public void DeleteBlasts(List<Int64> blastIdsToDelete)
        {
            //Validate Input
            foreach (Int64 blastId in blastIdsToDelete)
                if (blastId.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("BlastId");

            List<Blast> blastsToBeDeleted = new List<Blast>();

            foreach (Int64 blastId in blastIdsToDelete)
            {
                Blast blast = new Blast { BlastId = blastId };
                _DatabaseContext.Blasts.Attach(blast);
				_DatabaseContext.Blasts.DeleteObject(blast);
                blastsToBeDeleted.Add(blast);
                OnBlastDeleting(blast);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != blastIdsToDelete.Count) 
                throw new DataNotUpdatedException("One or more blast records have not been deleted.");
            foreach (Blast blastToBeDeleted in blastsToBeDeleted)
                OnBlastDeleted(blastToBeDeleted);
        }

        #endregion
	
	}
}
