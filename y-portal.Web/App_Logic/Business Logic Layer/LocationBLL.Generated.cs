//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using YPortal.BusinessEntities;
using YPortal.DataAccessLayer;
using YPortal.Helpers;

namespace YPortal.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class LocationBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public LocationBLL() : this(new DatabaseContext()) { }

        public LocationBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnLocationSaving(Location location);

        partial void OnLocationCreating(Location location);
        partial void OnLocationCreated(Location location);

        partial void OnLocationUpdating(Location location);
        partial void OnLocationUpdated(Location location);

        partial void OnLocationSaved(Location location);

        partial void OnLocationDeleting(Location location);
        partial void OnLocationDeleted(Location location);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Location GetLocationByLocationId(int locationId)
        {
            //Validate Input
            if (locationId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("locationId");
            return (_DatabaseContext.Locations.FirstOrDefault(location => location.LocationId == locationId));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Location> GetAllLocations()
        {
            return _DatabaseContext.Locations.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Location> GetAllLocationsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "LocationId";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from location in 
                        _DatabaseContext.Locations
                        .DynamicOrderBy(orderBy)
                    select location
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllLocations(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Locations.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewLocation(Location newLocation)
        {
            // Validate Parameters 
            if (newLocation == null)
                throw (new ArgumentNullException("newLocation"));

	        // Apply business rules
            OnLocationSaving(newLocation);
            OnLocationCreating(newLocation);

            _DatabaseContext.Locations.AddObject(newLocation);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No location created!");

            // Apply business workflow
            OnLocationCreated(newLocation);
            OnLocationSaved(newLocation);

            return newLocation.LocationId;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateLocation(Location updatedLocation)
        {
            // Validate Parameters
            if (updatedLocation == null)
                throw (new ArgumentNullException("updatedLocation"));

            // Validate Primary key value
            if (updatedLocation.LocationId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("LocationId");

            // Apply business rules
            OnLocationSaving(updatedLocation);
            OnLocationUpdating(updatedLocation);

            //attaching and making ready for parsistance
            if (updatedLocation.EntityState == EntityState.Detached)
                _DatabaseContext.Locations.Attach(updatedLocation);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedLocation, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No location updated!");

            //Apply business workflow
            OnLocationUpdated(updatedLocation);
            OnLocationSaved(updatedLocation);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteLocation(Location locationToBeDeleted)
        {
            //Validate Input
            if (locationToBeDeleted == null)
                throw (new ArgumentNullException("locationToBeDeleted"));

            // Validate Primary key value
            if (locationToBeDeleted.LocationId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("LocationId");

            OnLocationSaving(locationToBeDeleted);
            OnLocationDeleting(locationToBeDeleted);

            if (locationToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Locations.Attach(locationToBeDeleted);
			_DatabaseContext.Locations.DeleteObject(locationToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Location deleted!");
            
            OnLocationDeleted(locationToBeDeleted);
            OnLocationSaved(locationToBeDeleted);

        }

        public void DeleteLocations(List<int> locationIdsToDelete)
        {
            //Validate Input
            foreach (int locationId in locationIdsToDelete)
                if (locationId.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("LocationId");

            List<Location> locationsToBeDeleted = new List<Location>();

            foreach (int locationId in locationIdsToDelete)
            {
                Location location = new Location { LocationId = locationId };
                _DatabaseContext.Locations.Attach(location);
				_DatabaseContext.Locations.DeleteObject(location);
                locationsToBeDeleted.Add(location);
                OnLocationDeleting(location);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != locationIdsToDelete.Count) 
                throw new DataNotUpdatedException("One or more location records have not been deleted.");
            foreach (Location locationToBeDeleted in locationsToBeDeleted)
                OnLocationDeleted(locationToBeDeleted);
        }

        #endregion
	
	}
}
