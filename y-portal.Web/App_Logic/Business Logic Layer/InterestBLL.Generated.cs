//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using YPortal.BusinessEntities;
using YPortal.DataAccessLayer;
using YPortal.Helpers;

namespace YPortal.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class InterestBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public InterestBLL() : this(new DatabaseContext()) { }

        public InterestBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnInterestSaving(Interest interest);

        partial void OnInterestCreating(Interest interest);
        partial void OnInterestCreated(Interest interest);

        partial void OnInterestUpdating(Interest interest);
        partial void OnInterestUpdated(Interest interest);

        partial void OnInterestSaved(Interest interest);

        partial void OnInterestDeleting(Interest interest);
        partial void OnInterestDeleted(Interest interest);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Interest GetInterestByInterestId(int interestId)
        {
            //Validate Input
            if (interestId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("interestId");
            return (_DatabaseContext.Interests.FirstOrDefault(interest => interest.InterestId == interestId));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Interest> GetAllInterests()
        {
            return _DatabaseContext.Interests.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Interest> GetAllInterestsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "InterestId";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from interest in 
                        _DatabaseContext.Interests
                        .DynamicOrderBy(orderBy)
                    select interest
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllInterests(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Interests.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewInterest(Interest newInterest)
        {
            // Validate Parameters 
            if (newInterest == null)
                throw (new ArgumentNullException("newInterest"));

	        // Apply business rules
            OnInterestSaving(newInterest);
            OnInterestCreating(newInterest);

            _DatabaseContext.Interests.AddObject(newInterest);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No interest created!");

            // Apply business workflow
            OnInterestCreated(newInterest);
            OnInterestSaved(newInterest);

            return newInterest.InterestId;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateInterest(Interest updatedInterest)
        {
            // Validate Parameters
            if (updatedInterest == null)
                throw (new ArgumentNullException("updatedInterest"));

            // Validate Primary key value
            if (updatedInterest.InterestId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("InterestId");

            // Apply business rules
            OnInterestSaving(updatedInterest);
            OnInterestUpdating(updatedInterest);

            //attaching and making ready for parsistance
            if (updatedInterest.EntityState == EntityState.Detached)
                _DatabaseContext.Interests.Attach(updatedInterest);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedInterest, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No interest updated!");

            //Apply business workflow
            OnInterestUpdated(updatedInterest);
            OnInterestSaved(updatedInterest);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteInterest(Interest interestToBeDeleted)
        {
            //Validate Input
            if (interestToBeDeleted == null)
                throw (new ArgumentNullException("interestToBeDeleted"));

            // Validate Primary key value
            if (interestToBeDeleted.InterestId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("InterestId");

            OnInterestSaving(interestToBeDeleted);
            OnInterestDeleting(interestToBeDeleted);

            if (interestToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Interests.Attach(interestToBeDeleted);
			_DatabaseContext.Interests.DeleteObject(interestToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Interest deleted!");
            
            OnInterestDeleted(interestToBeDeleted);
            OnInterestSaved(interestToBeDeleted);

        }

        public void DeleteInterests(List<int> interestIdsToDelete)
        {
            //Validate Input
            foreach (int interestId in interestIdsToDelete)
                if (interestId.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("InterestId");

            List<Interest> interestsToBeDeleted = new List<Interest>();

            foreach (int interestId in interestIdsToDelete)
            {
                Interest interest = new Interest { InterestId = interestId };
                _DatabaseContext.Interests.Attach(interest);
				_DatabaseContext.Interests.DeleteObject(interest);
                interestsToBeDeleted.Add(interest);
                OnInterestDeleting(interest);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != interestIdsToDelete.Count) 
                throw new DataNotUpdatedException("One or more interest records have not been deleted.");
            foreach (Interest interestToBeDeleted in interestsToBeDeleted)
                OnInterestDeleted(interestToBeDeleted);
        }

        #endregion
	
	}
}
