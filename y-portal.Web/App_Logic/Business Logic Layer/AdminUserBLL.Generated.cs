//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using YPortal.BusinessEntities;
using YPortal.DataAccessLayer;
using YPortal.Helpers;

namespace YPortal.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class AdminUserBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public AdminUserBLL() : this(new DatabaseContext()) { }

        public AdminUserBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnAdminUserSaving(AdminUser adminUser);

        partial void OnAdminUserCreating(AdminUser adminUser);
        partial void OnAdminUserCreated(AdminUser adminUser);

        partial void OnAdminUserUpdating(AdminUser adminUser);
        partial void OnAdminUserUpdated(AdminUser adminUser);

        partial void OnAdminUserSaved(AdminUser adminUser);

        partial void OnAdminUserDeleting(AdminUser adminUser);
        partial void OnAdminUserDeleted(AdminUser adminUser);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public AdminUser GetAdminUserByUserId(int userId)
        {
            //Validate Input
            if (userId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("userId");
            return (_DatabaseContext.AdminUsers.FirstOrDefault(adminUser => adminUser.UserId == userId));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<AdminUser> GetAllAdminUsers()
        {
            return _DatabaseContext.AdminUsers.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<AdminUser> GetAllAdminUsersPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "UserId";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from adminUser in 
                        _DatabaseContext.AdminUsers
                        .DynamicOrderBy(orderBy)
                    select adminUser
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllAdminUsers(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.AdminUsers.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewAdminUser(AdminUser newAdminUser)
        {
            // Validate Parameters 
            if (newAdminUser == null)
                throw (new ArgumentNullException("newAdminUser"));

	        // Apply business rules
            OnAdminUserSaving(newAdminUser);
            OnAdminUserCreating(newAdminUser);

            _DatabaseContext.AdminUsers.AddObject(newAdminUser);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No adminUser created!");

            // Apply business workflow
            OnAdminUserCreated(newAdminUser);
            OnAdminUserSaved(newAdminUser);

            return newAdminUser.UserId;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateAdminUser(AdminUser updatedAdminUser)
        {
            // Validate Parameters
            if (updatedAdminUser == null)
                throw (new ArgumentNullException("updatedAdminUser"));

            // Validate Primary key value
            if (updatedAdminUser.UserId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("UserId");

            // Apply business rules
            OnAdminUserSaving(updatedAdminUser);
            OnAdminUserUpdating(updatedAdminUser);

            //attaching and making ready for parsistance
            if (updatedAdminUser.EntityState == EntityState.Detached)
                _DatabaseContext.AdminUsers.Attach(updatedAdminUser);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedAdminUser, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No adminUser updated!");

            //Apply business workflow
            OnAdminUserUpdated(updatedAdminUser);
            OnAdminUserSaved(updatedAdminUser);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteAdminUser(AdminUser adminUserToBeDeleted)
        {
            //Validate Input
            if (adminUserToBeDeleted == null)
                throw (new ArgumentNullException("adminUserToBeDeleted"));

            // Validate Primary key value
            if (adminUserToBeDeleted.UserId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("UserId");

            OnAdminUserSaving(adminUserToBeDeleted);
            OnAdminUserDeleting(adminUserToBeDeleted);

            if (adminUserToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.AdminUsers.Attach(adminUserToBeDeleted);
			_DatabaseContext.AdminUsers.DeleteObject(adminUserToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No AdminUser deleted!");
            
            OnAdminUserDeleted(adminUserToBeDeleted);
            OnAdminUserSaved(adminUserToBeDeleted);

        }

        public void DeleteAdminUsers(List<int> userIdsToDelete)
        {
            //Validate Input
            foreach (int userId in userIdsToDelete)
                if (userId.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("UserId");

            List<AdminUser> adminUsersToBeDeleted = new List<AdminUser>();

            foreach (int userId in userIdsToDelete)
            {
                AdminUser adminUser = new AdminUser { UserId = userId };
                _DatabaseContext.AdminUsers.Attach(adminUser);
				_DatabaseContext.AdminUsers.DeleteObject(adminUser);
                adminUsersToBeDeleted.Add(adminUser);
                OnAdminUserDeleting(adminUser);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != userIdsToDelete.Count) 
                throw new DataNotUpdatedException("One or more adminUser records have not been deleted.");
            foreach (AdminUser adminUserToBeDeleted in adminUsersToBeDeleted)
                OnAdminUserDeleted(adminUserToBeDeleted);
        }

        #endregion
	
	}
}
