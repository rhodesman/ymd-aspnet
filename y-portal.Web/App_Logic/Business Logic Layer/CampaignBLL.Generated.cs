//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using YPortal.BusinessEntities;
using YPortal.DataAccessLayer;
using YPortal.Helpers;

namespace YPortal.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class CampaignBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public CampaignBLL() : this(new DatabaseContext()) { }

        public CampaignBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnCampaignSaving(Campaign campaign);

        partial void OnCampaignCreating(Campaign campaign);
        partial void OnCampaignCreated(Campaign campaign);

        partial void OnCampaignUpdating(Campaign campaign);
        partial void OnCampaignUpdated(Campaign campaign);

        partial void OnCampaignSaved(Campaign campaign);

        partial void OnCampaignDeleting(Campaign campaign);
        partial void OnCampaignDeleted(Campaign campaign);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Campaign GetCampaignByCampaignId(Int64 campaignId)
        {
            //Validate Input
            if (campaignId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("campaignId");
            return (_DatabaseContext.Campaigns.FirstOrDefault(campaign => campaign.CampaignId == campaignId));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Campaign> GetAllCampaigns()
        {
            return _DatabaseContext.Campaigns.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Campaign> GetAllCampaignsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "CampaignId";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from campaign in 
                        _DatabaseContext.Campaigns
                        .DynamicOrderBy(orderBy)
                    select campaign
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllCampaigns(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Campaigns.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual Int64 CreateNewCampaign(Campaign newCampaign)
        {
            // Validate Parameters 
            if (newCampaign == null)
                throw (new ArgumentNullException("newCampaign"));

	        // Apply business rules
            OnCampaignSaving(newCampaign);
            OnCampaignCreating(newCampaign);

            _DatabaseContext.Campaigns.AddObject(newCampaign);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No campaign created!");

            // Apply business workflow
            OnCampaignCreated(newCampaign);
            OnCampaignSaved(newCampaign);

            return newCampaign.CampaignId;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateCampaign(Campaign updatedCampaign)
        {
            // Validate Parameters
            if (updatedCampaign == null)
                throw (new ArgumentNullException("updatedCampaign"));

            // Validate Primary key value
            if (updatedCampaign.CampaignId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("CampaignId");

            // Apply business rules
            OnCampaignSaving(updatedCampaign);
            OnCampaignUpdating(updatedCampaign);

            //attaching and making ready for parsistance
            if (updatedCampaign.EntityState == EntityState.Detached)
                _DatabaseContext.Campaigns.Attach(updatedCampaign);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedCampaign, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No campaign updated!");

            //Apply business workflow
            OnCampaignUpdated(updatedCampaign);
            OnCampaignSaved(updatedCampaign);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteCampaign(Campaign campaignToBeDeleted)
        {
            //Validate Input
            if (campaignToBeDeleted == null)
                throw (new ArgumentNullException("campaignToBeDeleted"));

            // Validate Primary key value
            if (campaignToBeDeleted.CampaignId.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("CampaignId");

            OnCampaignSaving(campaignToBeDeleted);
            OnCampaignDeleting(campaignToBeDeleted);

            if (campaignToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Campaigns.Attach(campaignToBeDeleted);
			_DatabaseContext.Campaigns.DeleteObject(campaignToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Campaign deleted!");
            
            OnCampaignDeleted(campaignToBeDeleted);
            OnCampaignSaved(campaignToBeDeleted);

        }

        public void DeleteCampaigns(List<Int64> campaignIdsToDelete)
        {
            //Validate Input
            foreach (Int64 campaignId in campaignIdsToDelete)
                if (campaignId.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("CampaignId");

            List<Campaign> campaignsToBeDeleted = new List<Campaign>();

            foreach (Int64 campaignId in campaignIdsToDelete)
            {
                Campaign campaign = new Campaign { CampaignId = campaignId };
                _DatabaseContext.Campaigns.Attach(campaign);
				_DatabaseContext.Campaigns.DeleteObject(campaign);
                campaignsToBeDeleted.Add(campaign);
                OnCampaignDeleting(campaign);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != campaignIdsToDelete.Count) 
                throw new DataNotUpdatedException("One or more campaign records have not been deleted.");
            foreach (Campaign campaignToBeDeleted in campaignsToBeDeleted)
                OnCampaignDeleted(campaignToBeDeleted);
        }

        #endregion
	
	}
}
